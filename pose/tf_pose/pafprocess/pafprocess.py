# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pafprocess
else:
    import _pafprocess

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Peak(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pafprocess.Peak_x_get, _pafprocess.Peak_x_set)
    y = property(_pafprocess.Peak_y_get, _pafprocess.Peak_y_set)
    score = property(_pafprocess.Peak_score_get, _pafprocess.Peak_score_set)
    id = property(_pafprocess.Peak_id_get, _pafprocess.Peak_id_set)

    def __init__(self):
        _pafprocess.Peak_swiginit(self, _pafprocess.new_Peak())
    __swig_destroy__ = _pafprocess.delete_Peak

# Register Peak in _pafprocess:
_pafprocess.Peak_swigregister(Peak)
cvar = _pafprocess.cvar
THRESH_HEAT = cvar.THRESH_HEAT
THRESH_VECTOR_SCORE = cvar.THRESH_VECTOR_SCORE
THRESH_VECTOR_CNT1 = cvar.THRESH_VECTOR_CNT1
THRESH_PART_CNT = cvar.THRESH_PART_CNT
THRESH_HUMAN_SCORE = cvar.THRESH_HUMAN_SCORE
NUM_PART = cvar.NUM_PART
STEP_PAF = cvar.STEP_PAF
COCOPAIRS_SIZE = cvar.COCOPAIRS_SIZE
COCOPAIRS_NET = cvar.COCOPAIRS_NET
COCOPAIRS = cvar.COCOPAIRS

class VectorXY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pafprocess.VectorXY_x_get, _pafprocess.VectorXY_x_set)
    y = property(_pafprocess.VectorXY_y_get, _pafprocess.VectorXY_y_set)

    def __init__(self):
        _pafprocess.VectorXY_swiginit(self, _pafprocess.new_VectorXY())
    __swig_destroy__ = _pafprocess.delete_VectorXY

# Register VectorXY in _pafprocess:
_pafprocess.VectorXY_swigregister(VectorXY)

class ConnectionCandidate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    idx1 = property(_pafprocess.ConnectionCandidate_idx1_get, _pafprocess.ConnectionCandidate_idx1_set)
    idx2 = property(_pafprocess.ConnectionCandidate_idx2_get, _pafprocess.ConnectionCandidate_idx2_set)
    score = property(_pafprocess.ConnectionCandidate_score_get, _pafprocess.ConnectionCandidate_score_set)
    etc = property(_pafprocess.ConnectionCandidate_etc_get, _pafprocess.ConnectionCandidate_etc_set)

    def __init__(self):
        _pafprocess.ConnectionCandidate_swiginit(self, _pafprocess.new_ConnectionCandidate())
    __swig_destroy__ = _pafprocess.delete_ConnectionCandidate

# Register ConnectionCandidate in _pafprocess:
_pafprocess.ConnectionCandidate_swigregister(ConnectionCandidate)

class Connection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cid1 = property(_pafprocess.Connection_cid1_get, _pafprocess.Connection_cid1_set)
    cid2 = property(_pafprocess.Connection_cid2_get, _pafprocess.Connection_cid2_set)
    score = property(_pafprocess.Connection_score_get, _pafprocess.Connection_score_set)
    peak_id1 = property(_pafprocess.Connection_peak_id1_get, _pafprocess.Connection_peak_id1_set)
    peak_id2 = property(_pafprocess.Connection_peak_id2_get, _pafprocess.Connection_peak_id2_set)

    def __init__(self):
        _pafprocess.Connection_swiginit(self, _pafprocess.new_Connection())
    __swig_destroy__ = _pafprocess.delete_Connection

# Register Connection in _pafprocess:
_pafprocess.Connection_swigregister(Connection)


def process_paf(p1, h1, f1):
    return _pafprocess.process_paf(p1, h1, f1)

def get_num_humans():
    return _pafprocess.get_num_humans()

def get_part_cid(human_id, part_id):
    return _pafprocess.get_part_cid(human_id, part_id)

def get_score(human_id):
    return _pafprocess.get_score(human_id)

def get_part_x(cid):
    return _pafprocess.get_part_x(cid)

def get_part_y(cid):
    return _pafprocess.get_part_y(cid)

def get_part_score(cid):
    return _pafprocess.get_part_score(cid)


